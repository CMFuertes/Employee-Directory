{"version":3,"sources":["utils/dataContext.js","components/TableBody/index.js","components/TableRow/index.js","components/Search/index.js","components/Navbar/index.js","utils/API.js","components/dataspace/index.js","components/mainpage/index.js","components/header/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["DataAreaContext","React","createContext","TableBody","context","useContext","DataHook","undefined","developerState","filteredUsers","name","map","login","picture","phone","email","dob","key","uuid","data-th","className","src","medium","alt","first","last","href","target","date","dateArray","split","year","join","formatDate","TableRow","id","headings","width","style","onClick","handleSort","toLowerCase","Search","dataContext","type","placeholder","aria-label","onChange","e","handleSearchChange","styles","display","justifyContent","Navbar","axios","get","Dataspace","useState","users","order","setDeveloperState","useEffect","API","then","results","console","log","data","Provider","value","event","filter","filteredList","item","values","indexOf","heading","currentOrder","elem","toString","sortedUsers","sort","a","b","localeCompare","age","updatedHeadings","length","Main","header","wrapper","props","children","App","Wrapper","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f7081bc3.chunk.js","sourcesContent":["  \r\nimport React from \"react\";\r\n\r\nconst DataAreaContext = React.createContext({\r\n\r\n});\r\n\r\nexport default DataAreaContext;","import React, { useContext } from \"react\";\r\nimport DataHook from \"../../utils/dataContext\"\r\n\r\nconst TableBody = () => {\r\n    const context = useContext(DataHook);\r\n\r\n    function formatDate(date){\r\n        const dateArray = date.split(\"-\");\r\n        const year = dateArray[0];\r\n        const month = dateArray[1];\r\n        const dayArray = dateArray[2].split(\"T\");\r\n        const day = dayArray[0];\r\n        const formattedDate =[month, day, year].join(\"-\");\r\n        return formattedDate;\r\n    }\r\n    return (\r\n        <tbody>\r\n        {context.developerState.filteredUsers[0] !== undefined && context.developerState.filteredUsers[0].name !== undefined ? (\r\n          context.developerState.filteredUsers.map(({ login, name, picture, phone, email, dob }) => {\r\n            return (\r\n              <tr key={login.uuid}>\r\n                <td data-th=\"Image\" className=\"align-middle\">\r\n                  <img\r\n                    src={picture.medium}\r\n                    alt=\"profile\"\r\n                    className=\"img-responsive\"\r\n                  />\r\n                </td>\r\n                <td data-th=\"Name\" className=\"name-cell align-middle\">\r\n                  {name.first} {name.last}\r\n                </td>\r\n                <td data-th=\"Phone\" className=\"align-middle\">\r\n                  {phone}\r\n                </td>\r\n                <td data-th=\"Email\" className=\"align-middle\">\r\n                  <a href={\"mailto:\" + email} target=\"__blank\">\r\n                    {email}\r\n                  </a>\r\n                </td>\r\n                <td data-th=\"DOB\" className=\"align-middle\">\r\n                  {formatDate(dob.date)}\r\n                </td>\r\n              </tr>\r\n            );\r\n          })\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </tbody>\r\n    );\r\n  }\r\n  \r\n  export default TableBody;\r\n","import React, { useContext } from \"react\";\r\nimport TableBody from \"../TableBody\";\r\nimport \"./style.css\";\r\nimport DataHook from \"../../utils/dataContext\";\r\n\r\nconst TableRow = () => {\r\n    const context = useContext(DataHook);\r\n\r\n    return (\r\n\r\n        <div className=\"datatable mt-5\">\r\n            <table\r\n                id=\"table\"\r\n                className=\"table table-striped table-hover table-condensed\"\r\n            >\r\n                <thead>\r\n                    <tr>\r\n                        {context.developerState.headings.map(({ name, width }) => {\r\n                            return (\r\n                                <th\r\n                                    className=\"col\"\r\n                                    key={name}\r\n                                    style={{ width }}\r\n                                    onClick={() => {\r\n                                        context.handleSort(name.toLowerCase());\r\n                                    }}\r\n                                >\r\n                                    {name}\r\n                                    <span className=\"pointer\"></span>\r\n                                </th>\r\n                            );\r\n                        })}\r\n                    </tr>\r\n                </thead>\r\n\r\n                <TableBody />\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TableRow;\r\n","import React, { useContext } from \"react\";\r\nimport dataContext from \"../../utils/dataContext\";\r\n\r\nconst Search = () => {\r\n    const context = useContext(dataContext);\r\nreturn (\r\n    <div className=\"searchbox\">\r\n      <div className=\"input-group\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\" id=\"\">\r\n              Search\r\n            </span>\r\n          </div>\r\n          <input\r\n          className=\"form-control mr-sm-2\"\r\n          type=\"search\"\r\n          placeholder=\"name\"\r\n          aria-label=\"Search\"\r\n          onChange={e => context.handleSearchChange(e)}\r\n        />\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Search;","import React from 'react';\r\nimport Search from \"../Search/index\"\r\n\r\nconst styles = {\r\ndisplay:\"flex\",\r\njustifyContent: \"center\"\r\n}\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav style={styles} className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n       <div className=\"search-area col-4\">\r\n        <Search />\r\n    </div>\r\n</nav>\r\n    );\r\n}\r\nexport default Navbar;","import axios from \"axios\";\r\n\r\nexport default {\r\n    getUsers: function(){\r\n        return axios.get(\"https://randomuser.me/api/?results=200&nat=us\")\r\n    }\r\n};","import React, { useState, useEffect } from \"react\";\r\nimport TableRow from \"../TableRow\";\r\nimport Navbar from \"../Navbar\";\r\nimport API from \"../../utils/API\";\r\nimport DataContext from \"../../utils/dataContext\";\r\n\r\nconst Dataspace = () => {\r\n  const [developerState, setDeveloperState] = useState({\r\n    users: [],\r\n    order: \"descend\",\r\n    filteredUsers: [],\r\n    headings: [\r\n      { name: \"Image\", width: \"10%\", order: \"descend\" },\r\n      { name: \"name\", width: \"10%\", order: \"descend\" },\r\n      { name: \"phone\", width: \"20%\", order: \"descend\" },\r\n      { name: \"email\", width: \"20%\", order: \"descend\" },\r\n      { name: \"dob\", width: \"10%\", order: \"descend\" }\r\n    ]\r\n  });\r\n\r\n  // filtered heading elements by ascending and descending order\r\n  const handleSort = heading => {\r\n    let currentOrder = developerState.headings\r\n      .filter(elem => elem.name === heading)\r\n      .map(elem => elem.order)\r\n      .toString();\r\n\r\n    if (currentOrder === \"descend\") {\r\n      currentOrder = \"ascend\";\r\n    } else {\r\n      currentOrder = \"descend\";\r\n    }\r\n\r\n    const compareFnc = (a, b) => {\r\n      if (currentOrder === \"ascend\") {\r\n        if (a[heading] === undefined) {\r\n          return 1;\r\n        } else if (b[heading] === undefined) {\r\n          return -1;\r\n        }\r\n        else if (heading === \"name\") {\r\n          return a[heading].first.localeCompare(b[heading].first);\r\n        } else if (heading === \"dob\") {\r\n          return a[heading].age - b[heading].age;\r\n        } else {\r\n          return a[heading].localeCompare(b[heading]);\r\n        }\r\n      } else {\r\n        if (a[heading] === undefined) {\r\n          return 1;\r\n        } else if (b[heading] === undefined) {\r\n          return -1;\r\n        }\r\n        else if (heading === \"name\") {\r\n          return b[heading].first.localeCompare(a[heading].first);\r\n        } else if (heading === \"dob\") {\r\n          return b[heading].age - a[heading].age;\r\n        } else {\r\n          return b[heading].localeCompare(a[heading]);\r\n        }\r\n      }\r\n    };\r\n    const sortedUsers = developerState.filteredUsers.sort(compareFnc);\r\n    const updatedHeadings = developerState.headings.map(elem => {\r\n      elem.order = elem.name === heading ? currentOrder : elem.order;\r\n      return elem;\r\n    });\r\n\r\n    setDeveloperState({\r\n      ...developerState,\r\n      filteredUsers: sortedUsers,\r\n      headings: updatedHeadings\r\n    });\r\n  };\r\n\r\n  // serch area funcionality and filter input to lower case\r\n  const handleSearchChange = event => {\r\n    const filter = event.target.value;\r\n    const filteredList = developerState.users.filter(item => {\r\n      let values = item.name.first.toLowerCase() + \" \" + item.name.last.toLowerCase();\r\n      console.log(filter, values)\r\n      if (values.indexOf(filter.toLowerCase()) !== -1) {\r\n        return item\r\n      };\r\n    });\r\n\r\n    setDeveloperState({ ...developerState, filteredUsers: filteredList });\r\n  };\r\n  // use effect to get results and users data\r\n  useEffect(() => {\r\n    API.getUsers().then(results => {\r\n      console.log(results.data.results);\r\n      setDeveloperState({\r\n        ...developerState,\r\n        users: results.data.results,\r\n        filteredUsers: results.data.results\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <DataContext.Provider\r\n      value={{ developerState, handleSearchChange, handleSort }}\r\n    >\r\n      <Navbar />\r\n      <div className=\"data-space\">\r\n        {developerState.filteredUsers.length > 0 ? <TableRow /> : <div></div>}\r\n      </div>\r\n    </DataContext.Provider>\r\n  );\r\n\r\n};\r\n\r\nexport default Dataspace;","import React from \"react\";\r\nimport Dataspace from \"../dataspace/index\";\r\n\r\n\r\nfunction Main (){\r\n    return(\r\n        <Dataspace />\r\n    );\r\n};\r\n\r\nexport default Main;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nfunction header () {\r\n    return (\r\n    <div className=\"header\">\r\n        <h1>Employee Directory</h1>\r\n        <p>Use \"Search\" to filter results. Click the arrows on the headers to sort.</p>\r\n    </div>\r\n\r\n    )}\r\nexport default header;","import React from \"react\";\r\n\r\nfunction wrapper(props) {\r\n    return (\r\n        <div className=\"container\">{props.children}</div>\r\n    )\r\n}\r\n export default wrapper;","import React from 'react';\nimport Mainpage from \"./components/mainpage/index\";\nimport Header from \"./components/header/index\";\nimport Wrapper from \"./components/Wrapper/index\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Wrapper>\n        <Header />\n        <Mainpage />\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}